import { featureCollection, point, feature, lineString } from '@turf/helpers';
import distance from '@turf/distance';
import along from '@turf/along';
import geoViewport from '@mapbox/geo-viewport';
const VECTOR_TILE_SIZE = 512;
export const makePoint = point;
export const makeLineString = lineString;
export function makeLatLngBounds(northEastCoordinates, southWestCoordinates) {
  return featureCollection([point(northEastCoordinates), point(southWestCoordinates)]);
}
export const makeFeature = feature;
export function makeFeatureCollection() {
  let features = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  let options = arguments.length > 1 ? arguments[1] : undefined;
  return featureCollection(features, options);
}
export function addToFeatureCollection(newFeatureCollection, newFeature) {
  return {
    ...newFeatureCollection,
    features: [...newFeatureCollection.features, newFeature]
  };
}
export const calculateDistance = distance;
export const pointAlongLine = along;
export function getOrCalculateVisibleRegion(coord, zoomLevel, width, height, nativeRegion) {
  const region = {
    ne: [0, 0],
    sw: [0, 0]
  };
  if (!nativeRegion || !Array.isArray(nativeRegion.properties.visibleBounds)) {
    const bounds = geoViewport.bounds(coord, zoomLevel, [width, height], VECTOR_TILE_SIZE);
    region.ne = [bounds[3], bounds[2]];
    region.sw = [bounds[1], bounds[0]];
  } else {
    [region.ne, region.sw] = nativeRegion.properties.visibleBounds;
  }
  return region;
}
//# sourceMappingURL=geoUtils.js.map